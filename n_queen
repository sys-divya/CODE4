def print_board(board):
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print()

def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col] or (col - (row - i) >= 0 and board[i][col - (row - i)]) or (col + (row - i) < n and board[i][col + (row - i)]):
            return False
    return True

def solve_n_queens(board, row, n):
    if row == n:
        print_board(board)
        return
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = True
            solve_n_queens(board, row + 1, n)
            board[row][col] = False

def n_queens(n):
    board = [[False] * n for _ in range(n)]
    board[0][0] = True  # Place first queen at (0, 0)
    solve_n_queens(board, 1, n)

# Example usage
if __name__ == "__main__":
    n = int(input("Enter the number of queens (N): "))
    print(f"Solutions for {n}-Queens problem with first queen at (0, 0):")
    n_queens(n)
